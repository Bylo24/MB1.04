import React, { useState, useEffect } from 'react';
import { StyleSheet, View, Text, Modal, TouchableOpacity, Image, ActivityIndicator } from 'react-native';
import { Ionicons, FontAwesome } from '@expo/vector-icons';
import { theme } from '../theme/theme';
import { supabase } from '../utils/supabaseClient';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { getCurrentSubscriptionTier } from '../services/subscriptionService';

// ... existing code ...

interface ProfileModalProps {
  visible: boolean;
  onClose: () => void;
  onLogout: () => void;
  onViewPremium?: () => void; // New prop for viewing premium
  subscriptionTier?: 'free' | 'premium'; // Pass subscription tier from parent
}

export default function ProfileModal({ 
  visible, 
  onClose, 
  onLogout, 
  onViewPremium,
  subscriptionTier: propSubscriptionTier
}: ProfileModalProps) {
  // ... existing state variables ...
  
  const [subscriptionTier, setSubscriptionTier] = useState<'free' | 'premium'>(propSubscriptionTier || 'free');
  const [isLoadingSubscription, setIsLoadingSubscription] = useState(!propSubscriptionTier);
  
  // ... existing useEffect ...
  
  // Load subscription status if not provided as prop
  useEffect(() => {
    if (visible && !propSubscriptionTier) {
      const loadSubscriptionStatus = async () => {
        setIsLoadingSubscription(true);
        try {
          const tier = await getCurrentSubscriptionTier();
          setSubscriptionTier(tier);
        } catch (error) {
          console.error('Error loading subscription status:', error);
        } finally {
          setIsLoadingSubscription(false);
        }
      };
      
      loadSubscriptionStatus();
    } else if (propSubscriptionTier) {
      setSubscriptionTier(propSubscriptionTier);
      setIsLoadingSubscription(false);
    }
  }, [visible, propSubscriptionTier]);
  
  // ... existing code ...
  
  return (
    <Modal
      visible={visible}
      transparent={true}
      animationType="slide"
      onRequestClose={onClose}
    >
      <View style={styles.modalOverlay}>
        <View style={styles.modalContainer}>
          <TouchableOpacity style={styles.closeButton} onPress={onClose}>
            <Ionicons name="close" size={24} color={theme.colors.text} />
          </TouchableOpacity>
          
          {/* ... existing profile content ... */}
          
          {/* Subscription Button */}
          {onViewPremium && (
            <>
              <TouchableOpacity 
                style={styles.menuItem}
                onPress={onViewPremium}
              >
                <View style={styles.menuItemLeft}>
                  <View style={[styles.menuIconContainer, { backgroundColor: theme.colors.premium + '20' }]}>
                    <FontAwesome name="diamond" size={20} color={theme.colors.premium} />
                  </View>
                  <View>
                    <Text style={styles.menuItemText}>
                      {subscriptionTier === 'premium' ? 'Manage Subscription' : 'Upgrade to Premium'}
                    </Text>
                    <Text style={styles.menuItemSubtext}>
                      {subscriptionTier === 'premium' 
                        ? 'View your premium benefits' 
                        : 'Unlock all premium features'}
                    </Text>
                  </View>
                </View>
                <Ionicons name="chevron-forward" size={20} color={theme.colors.subtext} />
              </TouchableOpacity>
              
              <View style={styles.divider} />
            </>
          )}
          
          {/* ... existing buttons ... */}
        </View>
      </View>
    </Modal>
  );
}

// Add these styles to the existing StyleSheet
const additionalStyles = {
  menuItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: 16,
    width: '100%',
  },
  menuItemLeft: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  menuIconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  menuItemText: {
    fontSize: 16,
    fontWeight: theme.fontWeights.medium,
    color: theme.colors.text,
  },
  menuItemSubtext: {
    fontSize: 14,
    color: theme.colors.subtext,
    marginTop: 2,
  },
  divider: {
    height: 1,
    backgroundColor: theme.colors.border,
    width: '100%',
    marginVertical: 8,
  },
};

// Merge the additional styles with the existing styles
const styles = StyleSheet.create({
  ...existingStyles,
  ...additionalStyles,
});