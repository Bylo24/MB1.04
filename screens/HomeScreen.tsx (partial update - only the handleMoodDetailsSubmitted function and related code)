import React, { useState, useEffect, useCallback } from 'react';
import { StyleSheet, Text, View, ScrollView, Dimensions, SafeAreaView, StatusBar, AppState, ActivityIndicator } from 'react-native';
import { theme } from '../theme/theme';
import MoodSlider from '../components/MoodSlider';
import ActivityCard from '../components/ActivityCard';
import MoodTrendGraph from '../components/MoodTrendGraph';
import QuoteComponent from '../components/QuoteComponent';
import Header from '../components/Header';
import ProfileModal from '../components/ProfileModal';
import { MoodRating, Activity } from '../types';
import { getTodayMoodEntry, getRecentMoodEntries, getMoodStreak, getWeeklyAverageMood, getCurrentWeekMoodEntries } from '../services/moodService';
import { getCurrentUser, isAuthenticated } from '../services/authService';
import { recommendedActivities } from '../data/mockData';
import { supabase } from '../utils/supabaseClient';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { getActivityRecommendations } from '../services/geminiService';

// ... existing code ...

export default function HomeScreen({ onLogout }: HomeScreenProps) {
  // ... existing state variables ...

  // Handle mood details submission
  const handleMoodDetailsSubmitted = async (rating: MoodRating, details: string) => {
    console.log('Mood details submitted:', { rating, details });
    setIsLoadingActivities(true);
    
    try {
      // Get personalized activity recommendations from Gemini
      const recommendedActivities = await getActivityRecommendations(rating, details);
      setActivities(recommendedActivities);
    } catch (error) {
      console.error('Error getting activity recommendations:', error);
      // Fallback to default activities
      setActivities(recommendedActivities.slice(0, 3));
    } finally {
      setIsLoadingActivities(false);
    }
  };
  
  // New function to generate recommendations based only on mood rating
  const handleGenerateRecommendations = async (rating: MoodRating) => {
    console.log('Generating recommendations based on mood rating:', rating);
    setIsLoadingActivities(true);
    
    try {
      // Get activity recommendations based only on mood rating (empty details)
      const recommendedActivities = await getActivityRecommendations(rating, "");
      setActivities(recommendedActivities);
    } catch (error) {
      console.error('Error getting activity recommendations:', error);
      // Fallback to default activities
      setActivities(recommendedActivities.slice(0, 3));
    } finally {
      setIsLoadingActivities(false);
    }
  };

  // ... existing code ...

  return (
    <SafeAreaView style={styles.safeArea}>
      <StatusBar barStyle="light-content" backgroundColor={theme.colors.background} />
      
      <Header onProfilePress={handleProfilePress} />
      
      <ScrollView 
        style={styles.container} 
        contentContainerStyle={styles.contentContainer}
        showsVerticalScrollIndicator={false}
      >
        {/* ... existing code ... */}
        
        <View style={styles.moodCheckInContainer}>
          <Text style={styles.sectionTitle}>How are you feeling today?</Text>
          <MoodSlider 
            value={selectedMood} 
            onValueChange={handleMoodChange}
            onMoodSaved={handleMoodSaved}
            onMoodDetailsSubmitted={handleMoodDetailsSubmitted}
            onGenerateRecommendations={handleGenerateRecommendations}
            disabled={isSliderDisabled}
          />
        </View>
        
        {/* ... rest of the existing code ... */}
      </ScrollView>
      
      <ProfileModal 
        visible={profileModalVisible} 
        onClose={handleProfileModalClose}
        onLogout={onLogout}
      />
    </SafeAreaView>
  );
}

// ... existing styles ...