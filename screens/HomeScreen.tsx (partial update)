import React, { useState, useEffect } from 'react';
import { StyleSheet, SafeAreaView, StatusBar } from 'react-native';
import { theme } from '../theme/theme';
import Header from '../components/Header';
import ProfileModal from '../components/ProfileModal';
import PremiumFeatureModal from '../components/PremiumFeatureModal';
import SubscriptionScreen from './SubscriptionScreen';
import { getCurrentSubscriptionTier } from '../services/subscriptionService';

// ... existing code ...

export default function HomeScreen({ onLogout }: HomeScreenProps) {
  // ... existing state variables ...
  
  const [showSubscriptionScreen, setShowSubscriptionScreen] = useState(false);
  const [subscriptionTier, setSubscriptionTier] = useState<'free' | 'premium'>('free');
  
  // ... existing code ...
  
  // Load subscription status
  useEffect(() => {
    const loadSubscriptionStatus = async () => {
      try {
        const tier = await getCurrentSubscriptionTier();
        setSubscriptionTier(tier);
      } catch (error) {
        console.error('Error loading subscription status:', error);
      }
    };
    
    loadSubscriptionStatus();
  }, []);
  
  // ... existing code ...
  
  // Handle view premium from profile modal
  const handleViewPremiumFromProfile = () => {
    setProfileModalVisible(false);
    setShowSubscriptionScreen(true);
  };
  
  // Handle upgrading to premium from feature modal
  const handleUpgradeToPremium = () => {
    setPremiumFeatureModal({
      ...premiumFeatureModal,
      visible: false,
    });
    setShowSubscriptionScreen(true);
  };
  
  // Handle closing the subscription screen
  const handleCloseSubscriptionScreen = () => {
    setShowSubscriptionScreen(false);
    // Refresh subscription status
    const refreshSubscription = async () => {
      const tier = await getCurrentSubscriptionTier();
      setSubscriptionTier(tier);
    };
    refreshSubscription();
  };
  
  // ... existing code ...
  
  if (showSubscriptionScreen) {
    return (
      <SubscriptionScreen onClose={handleCloseSubscriptionScreen} />
    );
  }
  
  return (
    <SafeAreaView style={styles.safeArea}>
      <StatusBar barStyle="light-content" backgroundColor={theme.colors.background} />
      
      <Header onProfilePress={handleProfilePress} />
      
      {/* ... existing code ... */}
      
      <ProfileModal 
        visible={profileModalVisible} 
        onClose={handleProfileModalClose}
        onLogout={onLogout}
        onViewPremium={handleViewPremiumFromProfile}
        subscriptionTier={subscriptionTier}
      />
      
      <PremiumFeatureModal
        visible={premiumFeatureModal.visible}
        onClose={handleClosePremiumFeatureModal}
        onUpgrade={handleUpgradeToPremium}
        featureName={premiumFeatureModal.featureName}
        featureDescription={premiumFeatureModal.featureDescription}
      />
    </SafeAreaView>
  );
}

// ... existing styles ...